---
import Layout from "../../layouts/Layout.astro";
import schedules from "./schedules.json";

const dateNow = new Date().toLocaleString("en-US", {
  timeZone: "America/New_York",
  day: "numeric",
  month: "numeric",
});

const secondsToTime = (seconds: number) => {
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const ampm = hours >= 12 ? "pm" : "am";
  const hours12 = hours % 12 || 12;
  const minutesStr = minutes.toString().padStart(2, "0");
  return `${hours12}:${minutesStr} ${ampm}`;
};

const scheduleToday =
  dateNow in schedules ? schedules[dateNow as keyof typeof schedules] : null;
---

<Layout title="PHS Web Dev">
  <main class="max-w-screen-lg px-2 mx-auto">
    <section class="sm:mt-16 mt-8">
      <h1 class="sm:text-5xl text-4xl font-bold">PHS Schedule</h1>
    </section>
    <section class="sm:mt-8 mt-4">
      <astro-countdown data-schedule={JSON.stringify(scheduleToday)}>
        <h1 class="text-4xl font-bold text-center" id="header">LOADING</h1>
        <div class="flex justify-center" id="counter" style="display:none">
          <h1 class="text-6xl" id="hours">00</h1>
          <h1 class="text-6xl">:</h1>
          <h1 class="text-6xl" id="minutes">00</h1>
          <h1 class="text-6xl">:</h1>
          <h1 class="text-6xl" id="seconds">00</h1>
        </div>
      </astro-countdown>

      <script>
        class AstroCountdown extends HTMLElement {
          constructor() {
            super();

            const header = this.querySelector("#header") as HTMLElement;
            const counter = this.querySelector("#counter") as HTMLElement;
            const counterHours = counter.querySelector("#hours") as HTMLElement;
            const counterMinutes = counter.querySelector(
              "#minutes"
            ) as HTMLElement;
            const counterSeconds = counter.querySelector(
              "#seconds"
            ) as HTMLElement;

            interface Schedule {
              type: string;
              periods: {
                period: string;
                startTime: number;
                endTime: number;
              }[];
            }

            const scheduleToday: Schedule | null = JSON.parse(
              this.dataset.schedule as string
            );

            if (!scheduleToday) {
              header.textContent = "No School Today";
              return;
            }

            const { periods } = scheduleToday;
            const schoolStartTime = periods[0].startTime;
            const schoolEndTime = periods[periods.length - 1].endTime;

            const dateNow = new Date();
            const estDate = new Date(
              dateNow.toLocaleString("en-US", { timeZone: "America/New_York" })
            );
            const midnightEST = new Date(
              estDate.getFullYear(),
              estDate.getMonth(),
              estDate.getDate()
            );
            let secondsNow = Math.floor(
              (dateNow.getTime() - midnightEST.getTime()) / 1000
            );

            if (secondsNow > schoolEndTime) {
              header.textContent = "School Is Over";
              return;
            }

            let hours: number;
            let minutes: number;
            let seconds: number;
            let secondsUntil: number;

            counter.style.display = "flex";

            const countdownIntervalID = setInterval(() => {
              if (secondsNow < schoolStartTime) {
                // Before School
                header.textContent = "School Will Start In";
                secondsUntil = schoolStartTime - secondsNow;
              } else {
                if (secondsNow > schoolEndTime) {
                  // After School
                  header.textContent = "School Is Over";
                  clearInterval(countdownIntervalID);
                  counter.style.display = "none";
                  return;
                }
                // During School
                const currentPeriod = periods.find(
                  ({ startTime, endTime }) =>
                    secondsNow >= startTime && secondsNow < endTime
                );

                const nextPeriod = periods.find(
                  ({ startTime }) => secondsNow < startTime
                );

                if (!currentPeriod) {
                  // Transition
                  if (!nextPeriod) {
                    // Last Period
                    header.textContent = `School Will End In`;
                    secondsUntil = schoolEndTime - secondsNow;
                  } else {
                    // Between Periods
                    header.textContent = `${nextPeriod.period} Will Start In`;
                    secondsUntil = nextPeriod.startTime - secondsNow;
                  }
                } else {
                  // In Period
                  header.textContent = `${currentPeriod.period} Will End In`;
                  secondsUntil = currentPeriod.endTime - secondsNow;
                }
              }

              hours = Math.floor(secondsUntil / 3600);
              minutes = Math.floor((secondsUntil % 3600) / 60);
              seconds = secondsUntil % 60;

              counterHours.textContent = hours.toString().padStart(2, "0");
              counterMinutes.textContent = minutes.toString().padStart(2, "0");
              counterSeconds.textContent = seconds.toString().padStart(2, "0");
              secondsNow += 1;
            }, 1000);
          }
        }

        customElements.define("astro-countdown", AstroCountdown);
      </script>
    </section>

    <section class="sm:mt-8 mt-4">
      {
        scheduleToday ? (
          <>
            <div class="sm:flex justify-between">
              <h1 class="sm:text-4xl text-3xl font-bold">Today's Schedule</h1>
              <h1 class="sm:text-4xl text-xl text-white/75 ">
                {new Date().toLocaleString("en-US", {
                  timeZone: "America/New_York",
                  weekday: "long",
                  month: "long",
                  day: "numeric",
                })}
              </h1>
            </div>
            <h2 class="text-4xl mt-4">{scheduleToday.type}</h2>
            <div class="mt-5">
              {scheduleToday.periods.map(({ period, startTime, endTime }) => (
                <div class="mt-3 flex justify-between items-center">
                  <h1 class="sm:text-3xl text-2xl font-bold">{period}</h1>
                  <div class="flex sm:gap-2 gap-1">
                    <h1 class="sm:text-3xl text-xl">
                      {secondsToTime(startTime)}
                    </h1>
                    <h1 class="sm:text-3xl text-xl">â†’</h1>
                    <h1 class="sm:text-3xl text-xl">
                      {secondsToTime(endTime)}
                    </h1>
                  </div>
                </div>
              ))}
            </div>
          </>
        ) : (
          <h1 class="text-5xl font-bold">No School Today</h1>
        )
      }
    </section>
  </main>
</Layout>
