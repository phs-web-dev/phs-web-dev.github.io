---
import Layout from "../../layouts/Layout.astro";
import schedules from "./schedules.json";

const dateNow = new Date().toLocaleString("en-US", {
  timeZone: "America/New_York",
  day: "numeric",
  month: "numeric",
});

const secondsToTime = (seconds: number) => {
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const ampm = hours >= 12 ? "pm" : "am";
  const hours12 = hours % 12 || 12;
  const minutesStr = minutes.toString().padStart(2, "0");
  return `${hours12}:${minutesStr} ${ampm}`;
};

const scheduleToday =
  dateNow in schedules ? schedules[dateNow as keyof typeof schedules] : null;
---

<Layout title="PHS Web Dev">
  <main class="lg:max-w-screen-lg max-w-screen-md px-2 mx-auto">
    <section class="sm:mt-16 mt-8">
      <h1 class="sm:text-5xl text-4xl font-bold">PHS Schedule</h1>
    </section>
    <section class="sm:mt-8 mt-4 bg-neutral-800/25 rounded-md p-5 shadow-md">
      <astro-countdown
        data-schedule={JSON.stringify(scheduleToday)}
        data-date={dateNow}
      >
        <h1 class="sm:text-4xl text-2xl font-bold text-center" id="header">
          LOADING
        </h1>
        <div class="flex justify-center" id="counter">
          <h1 class="text-6xl" id="hours">00</h1>
          <h1 class="text-6xl">:</h1>
          <h1 class="text-6xl" id="minutes">00</h1>
          <h1 class="text-6xl">:</h1>
          <h1 class="text-6xl" id="seconds">00</h1>
        </div>
      </astro-countdown>
    </section>

    <section class="sm:mt-8 mt-4">
      {
        scheduleToday ? (
          <>
            <div>
              <div class="sm:flex justify-between items-center">
                <h1 class="sm:text-4xl text-3xl font-bold">
                  {scheduleToday.type} Schedule
                </h1>
                <h1 class="sm:text-4xl text-xl text-white/75 ">
                  {new Date().toLocaleString("en-US", {
                    timeZone: "America/New_York",
                    weekday: "long",
                    month: "long",
                    day: "numeric",
                  })}
                </h1>
              </div>
            </div>
            <div class="mt-5 sm:p-6 p-3 bg-neutral-800/25 shadow-md rounded-md ">
              {scheduleToday.periods.map(({ period, startTime, endTime }) => (
                <div class="sm:my-4 my-2 first:mt-0 last:mb-0 flex justify-between items-center">
                  <h1 class="sm:text-3xl text-2xl font-bold">{period}</h1>
                  <h1 class="sm:text-3xl text-xl text-white/75">
                    {secondsToTime(startTime)} â†’ {secondsToTime(endTime)}
                  </h1>
                </div>
              ))}
            </div>
          </>
        ) : (
          <h1 class="text-5xl font-bold">No School Today</h1>
        )
      }
    </section>
  </main>
  <script>
    class AstroCountdown extends HTMLElement {
      constructor() {
        super();

        const header = this.querySelector("#header") as HTMLElement;

        const scheduleToday: Schedule | null = JSON.parse(
          this.dataset.schedule as string
        );
        const counter = this.querySelector("#counter") as HTMLElement;

        if (!scheduleToday) {
          header.textContent = "No School Today";
          counter.style.display = "none";
          return;
        }

        const date = this.dataset.date;

        const todayDate = new Date().toLocaleString("en-US", {
          timeZone: "America/New_York",
          day: "numeric",
          month: "numeric",
        });

        if (date !== todayDate) {
          header.textContent = "School Is Over";
          counter.style.display = "none";
          return;
        }

        const counterHours = counter.querySelector("#hours") as HTMLElement;
        const counterMinutes = counter.querySelector("#minutes") as HTMLElement;
        const counterSeconds = counter.querySelector("#seconds") as HTMLElement;

        interface Schedule {
          type: string;
          periods: {
            period: string;
            startTime: number;
            endTime: number;
          }[];
        }

        const { periods } = scheduleToday;
        const schoolStartTime = periods[0].startTime;
        const schoolEndTime = periods[periods.length - 1].endTime;

        const getSeconds = () => {
          const dateNow = new Date();
          const timeZoneoffset = -300; // Time zone offset in minutes for Eastern Time
          const midnightEST = new Date(
            dateNow.getFullYear(),
            dateNow.getMonth(),
            dateNow.getDate()
          );
          return Math.floor(
            (dateNow.getTime() +
              (dateNow.getTimezoneOffset() + timeZoneoffset) * 60 * 1000 -
              midnightEST.getTime()) /
              1000
          );
        };

        const updateCountdown = () => {
          let headerText: string;
          let secondsUntil: number;
          const secondsNow = getSeconds();

          if (secondsNow < schoolStartTime) {
            headerText = "School Will Start In";
            secondsUntil = schoolStartTime - secondsNow;
          } else if (secondsNow < schoolEndTime) {
            const currentPeriod = periods.find(
              ({ startTime, endTime }) =>
                secondsNow >= startTime && secondsNow < endTime
            );

            if (currentPeriod) {
              headerText = `${currentPeriod.period} Will End In`;
              secondsUntil = currentPeriod.endTime - secondsNow;
            } else {
              const nextPeriod = periods.find(
                ({ startTime }) => secondsNow < startTime
              );
              if (nextPeriod) {
                headerText = `${nextPeriod.period} Will Start In`;
                secondsUntil = nextPeriod.startTime - secondsNow;
              } else {
                headerText = "School Is Over";
                header.textContent = headerText;
                clearInterval(countdownIntervalID);
                counter.style.display = "none";
                return;
              }
            }
          } else {
            headerText = "School Is Over";
            header.textContent = headerText;
            clearInterval(countdownIntervalID);
            counter.style.display = "none";
            return;
          }

          header.textContent = headerText;
          const hours = Math.floor(secondsUntil / 3600);
          const minutes = Math.floor((secondsUntil % 3600) / 60);
          const seconds = secondsUntil % 60;

          counterHours.textContent = hours.toString().padStart(2, "0");
          counterMinutes.textContent = minutes.toString().padStart(2, "0");
          counterSeconds.textContent = seconds.toString().padStart(2, "0");
        };
        const countdownIntervalID = setInterval(updateCountdown, 1000);

        updateCountdown();
      }
    }

    customElements.define("astro-countdown", AstroCountdown);
  </script>
</Layout>
